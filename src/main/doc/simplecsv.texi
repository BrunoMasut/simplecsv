\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename simplecsv.info
@settitle SimpleCSV Documentation
@headings double
@c %**end of header

@c ----------------------------------------------------------------
@set simplecsv_version 2.3
@set simplecsv_year 2018
@set simplecsv_date February @value{simplecsv_year}
@set package SimpleCSV
@c ----------------------------------------------------------------

@titlepage
@headings off
@title SimpleCSV Package
@subtitle Version @value{simplecsv_version}
@subtitle @value{simplecsv_date}
@author Gray Watson

@page
This manual is licensed by Gray Watson under the Creative Commons Attribution-Share Alike 3.0 License.

Permission is granted to make and distribute verbatim copies of this manual provided this license
notice and this permission notice are preserved on all copies.
@end titlepage

@c ----------------------------------------------------------------

@c In the printed manual, we put the contents at the front.  For the digital manuals it is at the end. 
@iftex
@contents
@end iftex

@c ----------------------------------------------------------------
@node Top, Quick Start, (dir), (dir)
@top SimpleCSV
@everyheading @thischapter @| @thispage @| @today{}

Version @value{simplecsv_version} -- @value{simplecsv_date}

@cindex introduction
@cindex author
@cindex simple csv
This package provides some Java classes to help with the reading and writing of CSV (Comma Separated Values) files.

To get started quickly using SimpleCSV, @pxref{Quick Start}.  You can also take a look at the examples section of the
document which has various working code packages. @xref{Examples}.
@ifhtml
There is also a @uref{http://256.com/sources/simplecsv/docs/simplecsv.pdf, PDF version of this documentation}.
@end ifhtml
@iftex
There is also a @uref{http://256.com/sources/simplecsv/docs/simplecsv.html, HTML version of this documentation}.
@end iftex

Gray Watson @uref{http://256.com/gray/}

@menu
* Quick Start::                Start using SimpleCSV quickly.
* Using::                      How to use SimpleCSV.
* Examples::                   Usage examples to help you get started.
* License::                    Open Source license for the project.
* Index of Concepts::          Index of concepts in the manual.
@end menu

@c ----------------------------------------------------------------
@node Quick Start, Using, Top, Top
@chapter Start Using Quickly

@cindex getting started
@cindex how to get started
@cindex quick start
To use SimpleCSV you need to do the following steps.  For more information, @pxref{Using}.

@enumerate

@item Download SimpleCSV from the @uref{http://256.com/sources/simplecsv/releases/, SimpleCSV release page}.  @xref{Downloading}.

@item Add @code{@@CsvColumn} annotation to each of the fields or get/set method that you want to write and read to/from
CSV files.  @xref{CsvColumn Annotation}.

@example
public class Account @{
    @dots{}
    @@CsvColumn
    private String name;
@end example

Or.

@example
public class Account @{
    @dots{}
    @@CsvColumn
    private String getName() @{
        return name;
    @}
    @@CsvColumn
    private void setName(String name) @{
        this.name = name;
    @}
@end example

@item Create a CsvProcessor utility class for the entity.

@example
CsvProcessor<Account> processor =
    new CsvProcessor<Account>(Account.class);
@end example

@item Write a collection of @code{Account} entities to disk in CSV format.

@example
processor.writeAll(new File("accounts.csv"),
    accounts, true /* write header */); 
@end example

@item Read in from a CSV file and get a collection of @code{Account}s:

@example
List<Account> accounts =
    processor.readAll(new File("accounts.csv"),
    true /* first line header */,
    true /* validate header */,
    null /* used to record parse errors */); 
@end example

@end enumerate

For more extensive instructions, @pxref{Using}.

@c ----------------------------------------------------------------
@node Using, Downloading, Quick Start, Top
@chapter Using SimpleCSV

@cindex how to use
@cindex using SimpleCSV
@menu
* Downloading ::                Downloading the SimpleCSV jar.
* Maven ::                      How to use with Maven
* CsvColumn Annotation ::        Details about the @@CsvColumn annotation.
@end menu

@c ----------------------------------------------------------------
@node Downloading, Maven, Using, Using
@section Downloading Jar

@cindex how to download the jars
@cindex downloading the jars
@cindex where to get new jars
To get started with SimpleCSV, you will need to download the jar file.  The @uref{http://256.com/sources/simplecsv/releases/, SimpleCSV
release page} is the default repository but the jars are also available from the @uref{http://repo1.maven.org/maven2/com/j256/simplecsv/,
central maven repository}.

The code works with Java 6 or later.

@c ----------------------------------------------------------------
@node Maven, CsvColumn Annotation, Using, Using
@section Using With Maven

@cindex Maven, use with
@cindex pom.xml dependency
To use SimpleCSV with maven, include the following dependency in your @file{pom.xml} file:

@example
<dependency>
	<groupId>com.j256.simplecsv</groupId>
	<artifactId>simplecsv</artifactId>
	<version>@value{simplecsv_version}</version>
</dependency>
@end example 

@c ----------------------------------------------------------------
@node CsvColumn Annotation, Examples, Maven, Using
@section CsvColumn Annotation

@cindex CsvColumn annotation
@cindex @@CsvColumn
The @code{@@CsvColumn} annotation is used to mark the fields in your entity that you want to write to and read from CSV files
as a column.  It also allows you to customize the output format and other details for the particular field instance.  The
following fields from the annotation can be used:

@table @code

@cindex column name
@cindex header name
@cindex custom header name
@item columnName

This allows you to override and set a column name for the field.  By default it will use the field name.  This column
name is used when you are generating and validating the header line.

@cindex must not be blank
@cindex required columns
@cindex blank columns
@item mustNotBeBlank

Set to true if a value in the column is required.  This means that it cannot be empty when it is being read in and a
parse error or exception will be generated.

@cindex trim columns
@item trimInput

Set to true if you want the column read from the line to be trimmed (using @code{String.trim()}) before it is
converted to Java. This may not be applicable to all field types.

@cindex column format
@cindex format of column
@item format

Sets the format for this column. Not all types use the format specifier. Take a look at the particular converter
class javadocs for more particulars. The default format tends to be the @code{toString()} of the type, and
(for example) the @code{java.text.DecimalFormat} class is used to override for numbers.

@cindex converter flags
@item converterFlags

Optional flags for the converter which adjust the output. The flags that are used depend on the converter. See
the converter Javadocs for more information. These need to be constants that are added together. For example,

@example
@@CsvColumn(converterFlags = XxxConverter.FLAG1 + XxxConverter.FLAG2)
private Xxx dollarAmount;
@end example

@cindex custom converter
@cindex converter, custom
@item converterClass

Sets the converter to use to convert this column if you don't want to use the default appropriate internal class.
This will construct and instance of the class for this particular field. If you want to use a singleton then you
should register the type using @code{CsvProcessor.registerConverter(...)}. This converter class must have a public
no-arg constructor.

@cindex default value
@item defaultValue

Set this to a default string for the column.  If the column is empty when read, the value will be used instead. Default is
the empty string.

@cindex must be supplied
@cindex optional columns
@item mustBeSupplied

Set to false if a column is optional and can be skipped in the input altogether. If this is false then the column
doesn't have to be in the header or the lines at all. Default is true.

@emph{WARNING:} If you are using optional ordering, the same CsvProcessor cannot be used with multiple files at
the same time since the column lists can be dynamic depending on the input file being read.

@cindex order of the columns
@cindex column order
@item afterColumn

Used to set the order of the columns by setting the column-name that this column comes after. If this is not
specified then the order in which the fields and methods are discovered in the classes will determine their order
in the CSV file. If two fields say they come after the same field then you will get an undefined order. If there
is an loop in the after columns then an exception will be thrown.

@end table

Here's some examples of how to use the @code{@@CsvColumn} annotation.

Override the column name:

@example
@@CsvColumn(columnName = "Account Number")
private long number;
@end example

Change the column input/output format.  This will display the amount as @code{$1,231.00} or @code{($2,000,000.28)}. 

@example
@@CsvColumn(columnName = "Amount", format = "$###,##0.00;($###,##0.00)")
private double amount;
@end example

Specifying a custom converter class for an object that you have defined. 

@example
@@CsvColumn(columnName = "Gender", converterClass = GenderConverter.class)
private Gender gender;
@end example

@c ----------------------------------------------------------------
@node Examples, License, CsvColumn Annotation, Top
@chapter Example Code

@cindex examples of code
@cindex code examples
Here is some example code to help you get going with SimpleCSV.  I often find that code is the best documentation of how
to get something working.  Please feel free to suggest additional example packages for inclusion here.  Source code submissions
are welcome as long as you don't get piqued if we don't chose your's.

@table @asis

@cindex simple example
@item Simple, basic

This is a simple application which publishes a single object.  See the
@uref{http://256.com/sources/simplecsv/docs/example-simple, source code on github}.

@end table

@c ----------------------------------------------------------------
@node License, Index of Concepts, Examples, Top
@chapter Open Source License

@cindex license
@cindex open source license
This document is part of the SimpleCSV project.

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby
granted, provided that this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE.

The author may be contacted via the @uref{http://256.com/sources/simplecsv/, SimpleCSV home page}.

@c ----------------------------------------------------------------
@node Index of Concepts,, License, Top
@unnumbered Index of Concepts

@printindex cp

@ifhtml
@contents
@end ifhtml

@bye
